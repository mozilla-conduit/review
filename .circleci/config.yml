# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

version: 2.1

# Define a filter that matches tags and not branches.
tags-only-filter: &tags-only-filter
  filters:
    tags:
      only:
        - /.*/
    branches:
      ignore:
        - /.*/

# Define a filter that matches tags and branches.
branches-and-tags-filter: &branches-and-tags-filter
  filters:
    tags:
      only:
        - /.*/
    branches:
      only:
        - /.*/

orbs:
  win: circleci/windows@5.0.0

workflows:
  version: 2
  test:
    jobs:
      - test_3_9:
          <<: *branches-and-tags-filter
      - test_3_10:
          <<: *branches-and-tags-filter
      - test_3_11:
          <<: *branches-and-tags-filter
      - test_3_12:
          <<: *branches-and-tags-filter
      - test_3_13:
          <<: *branches-and-tags-filter
      - test_package:
          <<: *branches-and-tags-filter
      - publish:
          <<: *tags-only-filter
          requires:
            - test_3_9
            - test_3_10
            - test_3_11
            - test_3_12
            - test_3_13
            - test_package

jobs:
  test_3_9: &test_template
    environment:
      - REQUIREMENTS_FILE: dev/requirements/python3.9.txt
    docker:
      - image: cimg/python:3.9
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: setup
          command: |
            set -e
            mkdir -p ~/test-reports
            mkdir -p ~/coredumps
            # configure hg
            echo -e "[ui]\nusername=mozphab test <moz-phab@example.com>" > ~/.hgrc
            echo -e "[extensions]\nevolve=" >> ~/.hgrc
            # configure git
            git config --global user.email "moz-phab-tests@example.com"
            git config --global user.name "moz-phab tests"
            # Install and configure jj.
            JJ_VERSION="0.33.0"
            JJ_PLATFORM="x86_64-unknown-linux-musl"
            JJ_FILENAME="jj-v${JJ_VERSION}-${JJ_PLATFORM}.tar.gz"
            JJ_EXPECTED_SHA="39b5d689bcdc37256fe5f9ed9caccf5e73b310d1f86848fdf610a7bea9d75c14"
            curl -LO "https://github.com/jj-vcs/jj/releases/download/v${JJ_VERSION}/${JJ_FILENAME}"
            echo "${JJ_EXPECTED_SHA}  ${JJ_FILENAME}" | sha256sum -c
            tar -xzf "${JJ_FILENAME}"
            sudo mv jj /usr/local/bin
            jj config set --user user.name "moz-phab tests"
            jj config set --user user.email "moz-phab-tests@example.com"
            # install test dependencies
            python3 -m venv ~/venv
            source ~/venv/bin/activate
            python3 -m pip install --disable-pip-version-check --requirement $(echo $REQUIREMENTS_FILE)
            python3 -m pip install --disable-pip-version-check --editable .
      - run:
          name: versions
          command: |
            set -e
            source ~/venv/bin/activate
            pyenv version
            python3 --version
            which python3
            git --version
            jj --version
            python3 -m pip --disable-pip-version-check list --format freeze
      - run:
          name: run tests
          command: |
            set -e
            source ~/venv/bin/activate
            ulimit -c unlimited
            for F in tests/test_*.py; do
              python3 -m pytest --junitxml=~/test-reports/junit-$( basename $F .py ).xml -vv $F
            done
            cp core.* ~/coredumps || true
      - store_test_results:
          path: ~/test-reports
      - store_artifacts:
          path: ~/test-reports
      - store_artifacts:
          path: ~/coredumps
  test_3_10:
    <<: *test_template
    environment:
      - REQUIREMENTS_FILE: dev/requirements/python3.10.txt
    docker:
      - image: cimg/python:3.10
  test_3_11:
    <<: *test_template
    environment:
      - REQUIREMENTS_FILE: dev/requirements/python3.11.txt
    docker:
      - image: cimg/python:3.11
  test_3_12:
    <<: *test_template
    environment:
      - REQUIREMENTS_FILE: dev/requirements/python3.12.txt
    docker:
      - image: cimg/python:3.12
  test_3_13:
    <<: *test_template
    environment:
      - REQUIREMENTS_FILE: dev/requirements/python3.13.txt
    docker:
      - image: cimg/python:3.13

  test_win:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/venv
            source ~/venv/bin/activate
            pip install --disable-pip-version-check --requirement dev/requirements/windows.txt
            pip install --disable-pip-version-check --editable .
            git config --global user.email "moz-phab-tests@example.com"
            git config --global user.name "moz-phab tests"
      - run:
          name: versions
          command: |
            source ~/venv/bin/activate
            python --version
            git --version
            pip --disable-pip-version-check list --format freeze
      - run:
          name: run tests
          command: |
            source ~/venv/bin/activate
            mkdir test-reports
            function RunTest {
              & python -m pytest -vv @args
              if ($LASTEXITCODE -ne 0) {
                exit $LASTEXITCODE
              }
            }
            foreach ($f in Get-ChildItem -Path "tests" -Filter test_*.py) {
              RunTest --junitxml=test-reports/junit-$($f.BaseName).xml $f.FullName
            }
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  test_package:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: setup
          command: |
            python3 -m pip install --upgrade build pip
            python3 -m venv venv
            python3 -m build
            ./venv/bin/pip --disable-pip-version-check install dist/mozphab*.tar.gz
      - run:
          name: run tests
          command: |
            ./venv/bin/pip --disable-pip-version-check show MozPhab
            ./venv/bin/moz-phab version
  publish:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/repo
    steps:
    - checkout
    - run:
        name: build-and-publish
        # Generate packages and upload to PyPI via `twine`.
        command: |
            python3 -m pip install --upgrade build pip
            python3 -m pip install pipenv
            python3 -m pipenv install twine
            python3 -m build
            python3 -m pipenv run twine upload --repository pypi dist/*
